{ adminUsers: { login1: [Function] },
  restrictedadminUsers: 
   { changeOwnPassword: [Function],
     changePassword1: [Function],
     checkLogin: [Function],
     listAdmins: [Function],
     createAdminUser: [Function],
     getById: [Function],
     disableAdminUser: [Function],
     enableAdminUser: [Function],
     getAdmins: [Function],
     logout1: [Function],
     updateAdminUser: [Function],
     setProperty1: [Function] },
  restrictedapiKeys: 
   { listApiKeys: [Function],
     createApiKey: [Function],
     listEnabledApiKeys: [Function],
     setEnabled: [Function],
     delete: [Function] },
  config: 
   { getClientConfig1: [Function],
     reloadDeploySettings: [Function] },
  restrictedconfig: { getClientConfig2: [Function], setClientConfig: [Function] },
  restrictedconfigSync: 
   { compareEnvironmentConfiguration: [Function],
     compareEnvironmentConfigurationFromRemote: [Function],
     getEnvironmentConfiguration: [Function],
     setEnvironmentConfiguration: [Function] },
  restricteddeploy: 
   { getDeploySettings: [Function],
     putDeploySettings: [Function],
     getPropertyDefinitions: [Function],
     getServerEnviroment: [Function],
     oomtest: [Function],
     resetProperty: [Function],
     getProperty: [Function],
     setProperty2: [Function],
     getProperties: [Function] },
  restrictedservices: 
   { announceServer: [Function],
     getServiceConfig: [Function],
     setServiceServerStatus: [Function] },
  genericContent: { getCategory1: [Function] },
  restrictedgenericContent: 
   { getCategory2: [Function],
     setCategory1: [Function],
     removeCategory: [Function],
     removeArrayCategory: [Function],
     changeArrayCategory: [Function],
     getAll1: [Function] },
  restrictedtemplate: 
   { getTemplate1: [Function],
     setTemplate: [Function],
     resetTemplate: [Function],
     listTemplates: [Function],
     getCategory4: [Function],
     getAll2: [Function],
     setCategory2: [Function] },
  restricteddiagnostic: { heapDump: [Function], hotspotDump: [Function] },
  restrictedemail: 
   { clearEmailTemplate: [Function],
     listEmailTemplate: [Function],
     updateEmailTemplate: [Function] },
  events: 
   { pollForEventsRestricted: [Function],
     pollForEvents: [Function],
     getEvents1: [Function] },
  restrictedevents: 
   { sendTestEventToAll: [Function],
     sendTestEventToAllLimited: [Function],
     sendTestEventToAllTagged: [Function],
     sendTestEventToAllUnique: [Function],
     sendTestEventToAllVersioned: [Function],
     sendTestEventToRestricted: [Function],
     sendTestEventToUser: [Function],
     getEvents2: [Function] },
  example: 
   { queueMessage: [Function],
     queueTestList: [Function],
     queueTest: [Function],
     sendTargetedMessage: [Function] },
  feeds: { post: [Function] },
  feedback: 
   { addFeedBack: [Function],
     createFeedbackRequest: [Function],
     createFeedbackRequestNotAuthenticated: [Function] },
  restrictedfile: 
   { formUpload: [Function],
     getResourceFile: [Function],
     jsTestUpload: [Function],
     jsUpload1: [Function],
     jsUpload2: [Function] },
  gatekeeper: { getInit1: [Function] },
  globalData: { get: [Function] },
  adcolony: { callback: [Function] },
  android: { getInit2: [Function] },
  restrictedandroid: 
   { addAndroidUpdate: [Function],
     updateAndroidUpdate: [Function],
     removeAndroidUpdate: [Function],
     getAllAndroidUpdates: [Function] },
  appsflyer: { callbackNonOrganic: [Function], callbackOrganic: [Function] },
  restrictedavatars: 
   { getAvatarsForType: [Function],
     getAvatar: [Function],
     updateAvatar: [Function],
     removeAvatar: [Function],
     getAllAvatars: [Function],
     addAvatar: [Function] },
  restrictedbanner: 
   { getBannerZones: [Function],
     createBannerZone: [Function],
     removeBannerZones: [Function],
     getBannerCreative: [Function],
     updateBannerCreative: [Function],
     getBannerCreatives: [Function],
     createBannerCreative: [Function],
     removeBannerCreatives: [Function],
     getBannerZone: [Function],
     updateBannerZone: [Function] },
  restrictedbaseball: 
   { startContest1: [Function],
     importBaseballStatsEvent: [Function],
     listBaseballStatsEvents: [Function],
     exportBaseballStatsEvent: [Function] },
  cashBet: 
   { login2: [Function],
     logout2: [Function],
     balance: [Function],
     playerChanged: [Function],
     register: [Function] },
  restrictedcms: { getNotifications: [Function] },
  template: { getCategory3: [Function] },
  restrictedprofanityfilter: 
   { exportList: [Function],
     importList: [Function],
     test1: [Function] },
  contests: 
   { getArchivedContest: [Function],
     getArchivedContests: [Function],
     placeBet: [Function],
     activateAdcolonyVideo: [Function],
     activateAdcolonyVideoFallback: [Function],
     getPropositions: [Function],
     join: [Function] },
  games: { subscribe: [Function], unsubscribe: [Function] },
  teams: { getTeams1: [Function], getTeam1: [Function] },
  restrictedcontests: 
   { getContest: [Function],
     deleteContest: [Function],
     addProposition: [Function],
     removePropositions: [Function],
     addVideoProposition: [Function],
     removeVideoPropositions: [Function],
     changeTurnResult: [Function],
     closeVideoProposition: [Function],
     lockProposition: [Function],
     openProposition: [Function],
     openVideoProposition: [Function],
     getProposition: [Function],
     updateProposition: [Function],
     removeProposition: [Function],
     updateVideoProposition: [Function],
     removeVideoProposition: [Function],
     reOpenProposition: [Function],
     rollbackProposition: [Function],
     setAutoStartNextProposition: [Function],
     finishContest: [Function],
     publishContest: [Function],
     setContestFinishing: [Function],
     startContest2: [Function],
     addPropositionFromTemplate: [Function],
     resolveProposition: [Function],
     getUserContestHistory: [Function],
     getUserRoomsForContest: [Function] },
  restrictedgames: 
   { getGame: [Function],
     updateGame: [Function],
     deleteGame: [Function],
     getGames: [Function],
     createGame: [Function],
     finishGame: [Function],
     closeGameAndContests: [Function],
     resetGame: [Function],
     createGameAndContests: [Function],
     getGameContests: [Function],
     updateGameAndContests: [Function] },
  restrictedsportStats: 
   { updateStatsDelay: [Function],
     createResolveDoc: [Function],
     getResolveDoc: [Function],
     updateResolveDoc: [Function],
     deleteResolveDoc: [Function],
     getAllResolveDocs: [Function],
     getStatsEventIds: [Function],
     setOverridden: [Function],
     getStats: [Function],
     updateStats: [Function] },
  restrictedpropositionTemplates: 
   { getTemplate2: [Function],
     updateTemplate: [Function],
     deleteTemplate: [Function],
     createTemplate: [Function],
     getTemplatesForSport: [Function] },
  restrictedteams: 
   { getTeams2: [Function],
     createTeam: [Function],
     getTeam2: [Function],
     updateTeam: [Function],
     deleteTeam: [Function] },
  restrictedtieredRewardModel: 
   { getAllTieredRewardModels: [Function],
     createTieredRewardModel: [Function],
     getActiveTieredRewardModels: [Function],
     getTieredRewardModel: [Function],
     updateTieredRewardModel: [Function] },
  restrictedexmachinatest: 
   { cashBetBalance: [Function],
     cashBetTransfer: [Function],
     cleanupClosedGameSNSTopics: [Function],
     fakeVerifyEmail: [Function],
     getDuplicateParticipants: [Function],
     testConnectionClosed: [Function] },
  restrictedexport: { getStreamingLeaderboardExport: [Function] },
  friends: 
   { cancelFriend: [Function],
     getFriends: [Function],
     invite1: [Function],
     getFriendsLeaderboard: [Function],
     accept: [Function] },
  leaderboard: { getRoomTypeLeaderboard1: [Function] },
  restrictedleaderboard: { getRoomTypeLeaderboard2: [Function] },
  leagues: 
   { leave: [Function],
     sendChatMessage: [Function],
     invite2: [Function],
     reportChatUser1: [Function],
     createLeague: [Function],
     getLeagueHistoryLeaderboard: [Function],
     acceptInvite: [Function],
     declineInvite: [Function],
     getLeague1: [Function],
     updateLeague: [Function],
     getLeagueHistory: [Function],
     kick: [Function],
     demote: [Function],
     getAvatars: [Function],
     promote: [Function] },
  restrictedleagues: 
   { getLeagueStats: [Function],
     exportLeagues: [Function],
     getLeague2: [Function] },
  restrictedmessages: { sendMessage: [Function] },
  restrictedpush: 
   { enableAllEndpoints: [Function],
     enableEndpointArn: [Function],
     putSNSTemplate: [Function],
     test2: [Function] },
  rooms: 
   { getRoom: [Function],
     joinRoom: [Function],
     reportChatUser2: [Function],
     leaveRoom: [Function],
     sendRoomMessage: [Function] },
  restrictedpayoutModelroom: 
   { getPayoutModel1: [Function],
     updatePayoutModel1: [Function],
     getAllPayoutModels1: [Function],
     createPayoutModel1: [Function],
     getActivePayoutModels1: [Function] },
  restrictedroomtag: 
   { getRoomTags: [Function],
     createRoomTag: [Function],
     removeRoomTags: [Function] },
  restrictedpayoutModelroomTypeLeaderboard: 
   { getPayoutModel2: [Function],
     updatePayoutModel2: [Function],
     getAllPayoutModels2: [Function],
     createPayoutModel2: [Function],
     getActivePayoutModels2: [Function] },
  restrictedroomType: 
   { getRoomType: [Function],
     updateRoomType: [Function],
     getAllRoomTypes: [Function],
     createRoomType: [Function],
     getActiveRoomTypes: [Function] },
  restrictedsports: 
   { getSport: [Function],
     updateSport: [Function],
     deleteSport: [Function],
     getAllSports: [Function],
     createSport: [Function] },
  users: 
   { changePassword2: [Function],
     logout3: [Function],
     deleteUser: [Function],
     addFacebookCredentials: [Function],
     removeFacebookCredentials: [Function],
     registerAsGuest: [Function],
     registerWithEmail: [Function],
     registerWithFacebook: [Function],
     toggleTeamNotifications: [Function],
     enableActionNotifications: [Function],
     enableGlobalNotifications: [Function],
     reportUser: [Function],
     updateClientDataStore: [Function],
     updateProfileFields: [Function],
     changeEmail1: [Function],
     requestVerifiedEmailChange: [Function],
     getTransactionHistory1: [Function],
     handleChangePasswordByToken: [Function],
     handleEmailComplaint: [Function],
     handleUserVerification: [Function],
     loginWithAuthenticationToken: [Function],
     loginWithCashBet: [Function],
     loginWithEmail: [Function],
     loginWithEmailAndPassword: [Function],
     loginWithFacebook: [Function],
     requestUserVerification: [Function],
     deauthorizeFacebookCallback: [Function],
     forgotPassword: [Function],
     forgotPasswordByEmail: [Function],
     getClientIp: [Function],
     handleVerifiedEmailChange: [Function],
     searchByCriteria: [Function],
     setRequiredActionData: [Function],
     toggleAutoLogin: [Function],
     updateDisplayName: [Function],
     getUser1: [Function] },
  userState: { getState: [Function] },
  restrictedusersreported: 
   { getReportedUser: [Function],
     updateReportedUser: [Function],
     getReportedUsers: [Function] },
  restrictedusers: 
   { getUsers: [Function],
     updateProfile: [Function],
     addAdminTransaction: [Function],
     changeEmail2: [Function],
     getTransactionHistory2: [Function],
     importExternalWinviewProperties: [Function],
     setBlocked: [Function],
     addAdminTransactionFromApi: [Function],
     changePayPalEmail: [Function],
     getUser2: [Function] } }